Question.
    Scenario: You have a PostgreSQL database with a users table and an orders table. The orders table has a foreign key reference to the users table. Write a SQL query to fetch the
    top 5 users with the highest total order amount in the last month. Assume that the orders table has columns user_id, 
    amount, and order_date.
    Requirements:
    Write the SQL query.
    Explain how you would index the tables to optimize the query.


Solution:

    SELECT u.user_id, u.username, SUM(o.amount) AS total_amount
    FROM users u
    JOIN orders o ON u.user_id = o.user_id
    WHERE o.order_date >= CURRENT_DATE - INTERVAL '1 month'
    GROUP BY u.user_id, u.username
    ORDER BY total_amount DESC
    LIMIT 5;



    Steps: 
    1. Join the users table with the orders table on the user_id column.
    2. Filter the orders table to include only orders from the last month.
    3. Group the results by user_id and username.
    4. Calculate the total order amount for each user using the SUM function.
    5. Sort the results in descending order by total_amount.


    
    Index on orders.user_id to speed up the join operation:
    CREATE INDEX idx_orders_user_id ON orders(user_id);

    Index on orders.order_date to optimize the filtering on the date range:
    CREATE INDEX idx_orders_order_date ON orders(order_date);

    Composite index on (user_id, order_date) could be helpful if the query is frequently filtering by date and joining on user_id.

